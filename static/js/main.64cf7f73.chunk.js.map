{"version":3,"sources":["Componenet/Timer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Timer","minutes","seconds","useState","paused","setPaused","over","setOver","parseInt","time","setTime","useEffect","timerID","setInterval","clearInterval","className","toString","padStart","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PA+CeA,EA5CD,SAAC,GAAkC,IAAD,IAA/BC,eAA+B,MAArB,EAAqB,MAAlBC,eAAkB,MAAR,EAAQ,EAC9C,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,oBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,CAC/BF,QAASO,SAASP,EAAS,IAC3BC,QAASM,SAASN,EAAS,MAF7B,mBAAOO,EAAP,KAAaC,EAAb,KA4BA,OALAC,qBAAU,WACR,IAAIC,EAAUC,aAAY,WAlBtBT,GAAUE,IAEO,IAAjBG,EAAKR,SAAkC,IAAjBQ,EAAKP,QAC7BK,GAAQ,GACkB,IAAjBE,EAAKP,QACdQ,EAAQ,CACNT,QAASQ,EAAKR,QAAU,EACxBC,QAAS,KAGXQ,EAAQ,CACNT,QAASQ,EAAKR,QACdC,QAASO,EAAKP,QAAU,OAMY,KACxC,OAAO,kBAAMY,cAAcF,OAI3B,sBAAKG,UAAU,QAAf,UACE,yCAAUN,EAAKR,QAAQe,WAAWC,SAAS,EAAG,KAA9C,YAAsDR,EAAKP,QACxDc,WACAC,SAAS,EAAG,QACf,qBAAKF,UAAU,OAAf,SAAuBT,EAAO,aAAe,KAC7C,wBAAQY,QAAS,kBAAMb,GAAWD,IAAlC,SACGA,EAAS,SAAW,cC9Bde,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64cf7f73.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./Timer.css\";\r\n\r\nconst Timer = ({ minutes = 5, seconds = 0 }) => {\r\n  const [paused, setPaused] = useState(false);\r\n  const [over, setOver] = useState(false);\r\n  const [time, setTime] = useState({\r\n    minutes: parseInt(minutes, 10),\r\n    seconds: parseInt(seconds, 10),\r\n  });\r\n\r\n  const tick = () => {\r\n    if (paused || over) return;\r\n\r\n    if (time.minutes === 0 && time.seconds === 0) {\r\n      setOver(true);\r\n    } else if (time.seconds === 0) {\r\n      setTime({\r\n        minutes: time.minutes - 1,\r\n        seconds: 59,\r\n      });\r\n    } else {\r\n      setTime({\r\n        minutes: time.minutes,\r\n        seconds: time.seconds - 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timerID = setInterval(() => tick(), 1000);\r\n    return () => clearInterval(timerID);\r\n  });\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <span>{`${time.minutes.toString().padStart(2, \"0\")}:${time.seconds\r\n        .toString()\r\n        .padStart(2, \"0\")}`}</span>\r\n      <div className=\"over\">{over ? \"Time's up!\" : \"\"}</div>\r\n      <button onClick={() => setPaused(!paused)}>\r\n        {paused ? \"Resume\" : \"Pause\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import './App.css';\nimport Timer from './Componenet/Timer';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Timer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}